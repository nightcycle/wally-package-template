name: Build and Publish

on:
  release:
    types: [published]

jobs:
  get_published_release:
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.release_info.outputs.release_id }}
      upload_url: ${{ steps.release_info.outputs.upload_url }}
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      repo_desc: ${{ steps.release_info.outputs.repo_desc }}
      repo_name: ${{ steps.release_info.outputs.repo_name }}
      repo_owner_name: ${{ steps.release_info.outputs.repo_owner_name }}
    steps:
      - name: Set Release Info
        id: release_info
        run: |
          echo "::set-output name=tag_name::${{ github.event.release.tag_name }}"
          echo "::set-output name=release_id::${{ github.event.release.id }}"
          echo "::set-output name=upload_url::${{ github.event.release.upload_url }}"

          repo_owner_name=${{ github.repository_owner }}
          echo "::set-output name=repo_owner_name::$repo_owner_name"

          repo_name=${{ github.repository }}
          forward_repo_pattern="${repo_owner_name}/"
          empty_str=""
          repo_name="${repo_name/${forward_repo_pattern}/${empty_str}}"
          echo "::set-output name=repo_name::$repo_name"

          # Use the GitHub API to fetch the repository description
          description_prefix="\"description\":"
          curl -L "https://api.github.com/repos/${repo_owner_name}/${repo_name}" > "desc.text"
          desc=$(<desc.text)
          desc=$(echo "$desc" | grep -F "$description_prefix")
          desc="${desc/${description_prefix}/${empty_str}}"
          repo_desc=$(echo "$desc" | grep -o '"[^"]*"')
          echo "::set-output name=repo_desc::$repo_desc"

  publish_to_wally:
    needs: get_published_release
    runs-on: windows-latest
    env:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      ROJO_CONFIG: "dev.project.json"
      RBXL_FILE: "build/Package.rbxl"
    steps:
      # Checkout your Git repo
      - uses: actions/checkout@v2

      - uses: ok-nick/setup-aftman@v0.4.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: install wally
        run: sh scripts/wally-install.sh "${{env.ROJO_CONFIG}}"

      - name: validate project
        run: sh scripts/validate.sh --wally

      - name: Update version and labels
        shell: bash
        run: |
          repo_owner="${{needs.get_published_release.outputs.repo_owner_name}}"
          repo_name="${{needs.get_published_release.outputs.repo_name}}"
          repo_desc=${{needs.get_published_release.outputs.repo_desc}}
          goal_version_str="${{needs.get_published_release.outputs.tag_name}}"

          sh scripts/release/wally.sh "$repo_owner" "$repo_name" "$repo_desc" "$goal_version_str" "${{env.ROJO_CONFIG}}"

      - name: build
        run: sh scripts/build.sh --wally

      - name: Upload ${{env.RBXL_FILE}} file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.get_published_release.outputs.upload_url }}
          asset_path: ${{env.RBXL_FILE}}
          asset_name: Package.rbxl
          asset_content_type: application/octet-stream

      - name: publish package
        shell: bash
        run: |
          cd build
          set -e
          wally login --token "${{secrets.WALLY_OAUTH}}"
          wally publish
